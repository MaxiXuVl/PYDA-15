{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Домашнее задание к лекции \"Базовые понятия статистики\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Обязательная часть\n",
    "\n",
    "Будем осуществлять работу с непростым [набором данных](https://raw.githubusercontent.com/obulygin/pyda_homeworks/master/statistics_basics/horse_data.csv) о состоянии здоровья лошадей, испытывающих кишечные колики. \n",
    "\n",
    "### Задание 1. Базовое изучение\n",
    "\n",
    "Изучить представленный набор данных на основе [описания его столбцов](https://raw.githubusercontent.com/obulygin/pyda_homeworks/master/statistics_basics/horse_data.names) и выбрать 8 столбцов для дальнейшего изучения (среди них должны быть как числовые, так и категориальные). Провести расчет базовых метрик для них, кратко описать результаты."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Surgery</th>\n",
       "      <th>Age</th>\n",
       "      <th>Hospital Number</th>\n",
       "      <th>Rectal temperature</th>\n",
       "      <th>Pulse</th>\n",
       "      <th>Respiratory rate</th>\n",
       "      <th>temperature of extremities</th>\n",
       "      <th>peripheral pulse</th>\n",
       "      <th>mucous membranes</th>\n",
       "      <th>capillary refill time</th>\n",
       "      <th>...</th>\n",
       "      <th>packed cell volume</th>\n",
       "      <th>total protein</th>\n",
       "      <th>abdominocentesis appearance</th>\n",
       "      <th>abdomcentesis total protein</th>\n",
       "      <th>outcome</th>\n",
       "      <th>surgical lesion</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "      <th>cp_data</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530101</td>\n",
       "      <td>38.5</td>\n",
       "      <td>66.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>45.0</td>\n",
       "      <td>8.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>11300</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>534817</td>\n",
       "      <td>39.2</td>\n",
       "      <td>88.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>50.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2208</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530334</td>\n",
       "      <td>38.3</td>\n",
       "      <td>40.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>33.0</td>\n",
       "      <td>6.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>5290409</td>\n",
       "      <td>39.1</td>\n",
       "      <td>164.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>48.0</td>\n",
       "      <td>7.2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2208</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530255</td>\n",
       "      <td>37.3</td>\n",
       "      <td>104.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>74.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>4300</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Surgery  Age  Hospital Number  Rectal temperature  Pulse  Respiratory rate  \\\n",
       "0      2.0    1           530101                38.5   66.0              28.0   \n",
       "1      1.0    1           534817                39.2   88.0              20.0   \n",
       "2      2.0    1           530334                38.3   40.0              24.0   \n",
       "3      1.0    9          5290409                39.1  164.0              84.0   \n",
       "4      2.0    1           530255                37.3  104.0              35.0   \n",
       "\n",
       "   temperature of extremities  peripheral pulse  mucous membranes  \\\n",
       "0                         3.0               3.0               NaN   \n",
       "1                         NaN               NaN               4.0   \n",
       "2                         1.0               1.0               3.0   \n",
       "3                         4.0               1.0               6.0   \n",
       "4                         NaN               NaN               6.0   \n",
       "\n",
       "   capillary refill time  ...  packed cell volume  total protein  \\\n",
       "0                    2.0  ...                45.0            8.4   \n",
       "1                    1.0  ...                50.0           85.0   \n",
       "2                    1.0  ...                33.0            6.7   \n",
       "3                    2.0  ...                48.0            7.2   \n",
       "4                    2.0  ...                74.0            7.4   \n",
       "\n",
       "   abdominocentesis appearance  abdomcentesis total protein  outcome  \\\n",
       "0                          NaN                          NaN      2.0   \n",
       "1                          2.0                          2.0      3.0   \n",
       "2                          NaN                          NaN      1.0   \n",
       "3                          3.0                          5.3      2.0   \n",
       "4                          NaN                          NaN      2.0   \n",
       "\n",
       "   surgical lesion     25  26  27  cp_data  \n",
       "0                2  11300   0   0        2  \n",
       "1                2   2208   0   0        2  \n",
       "2                2      0   0   0        1  \n",
       "3                1   2208   0   0        1  \n",
       "4                2   4300   0   0        2  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 282,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Сразу выполняю дополнительное задание\n",
    "names_cols = ['Surgery', 'Age', 'Hospital Number', 'Rectal temperature', 'Pulse', 'Respiratory rate', \n",
    "              'temperature of extremities', 'peripheral pulse', 'mucous membranes', 'capillary refill time', \n",
    "              'pain', 'peristalsis', 'abdominal distension', 'nasogastric tube', 'nasogastric reflux', \n",
    "              'nasogastric reflux PH', 'rectal examination - feces', 'abdomen', 'packed cell volume', \n",
    "              'total protein', 'abdominocentesis appearance', 'abdomcentesis total protein', 'outcome', \n",
    "              'surgical lesion', '25', '26', '27', 'cp_data' ]\n",
    "data = pd.read_csv('horse_data.csv', header=None, names=names_cols, na_values='?')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 300 entries, 0 to 299\n",
      "Data columns (total 28 columns):\n",
      "Surgery                        299 non-null float64\n",
      "Age                            300 non-null int64\n",
      "Hospital Number                300 non-null int64\n",
      "Rectal temperature             240 non-null float64\n",
      "Pulse                          276 non-null float64\n",
      "Respiratory rate               242 non-null float64\n",
      "temperature of extremities     244 non-null float64\n",
      "peripheral pulse               231 non-null float64\n",
      "mucous membranes               253 non-null float64\n",
      "capillary refill time          268 non-null float64\n",
      "pain                           245 non-null float64\n",
      "peristalsis                    256 non-null float64\n",
      "abdominal distension           244 non-null float64\n",
      "nasogastric tube               196 non-null float64\n",
      "nasogastric reflux             194 non-null float64\n",
      "nasogastric reflux PH          53 non-null float64\n",
      "rectal examination - feces     198 non-null float64\n",
      "abdomen                        182 non-null float64\n",
      "packed cell volume             271 non-null float64\n",
      "total protein                  267 non-null float64\n",
      "abdominocentesis appearance    135 non-null float64\n",
      "abdomcentesis total protein    102 non-null float64\n",
      "outcome                        299 non-null float64\n",
      "surgical lesion                300 non-null int64\n",
      "25                             300 non-null int64\n",
      "26                             300 non-null int64\n",
      "27                             300 non-null int64\n",
      "cp_data                        300 non-null int64\n",
      "dtypes: float64(21), int64(7)\n",
      "memory usage: 65.8 KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В столбцах 25, 26 и 27 очень странно заполнены данные (см ниже). Судя по описанию, 3 эти солбца отвечают за 4 характеристики, таакие как: место поражения, тип поражения, подтип поражения и конкретный код поражения. Все эти характеристики записаны слитно в один из столбцов 25, 26, 27. Большая часть данных содержится в столбце 25 - заполнено 244 строки. Еще несколько \"склеиных\" характеристик поражения раскиданы по оставшимся столбцам 26 и 27. Самым лучшим решением мне кажется выделить все 4 признака отдельно и записать их каждый в свой столбец."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25:  \n",
      " 0        56\n",
      "3111     33\n",
      "3205     29\n",
      "2208     20\n",
      "2205     13\n",
      "         ..\n",
      "11400     1\n",
      "7400      1\n",
      "3113      1\n",
      "3300      1\n",
      "41110     1\n",
      "Name: 25, Length: 61, dtype: int64 \n",
      "\n",
      "26:  \n",
      " 0       293\n",
      "3111      3\n",
      "6112      1\n",
      "7111      1\n",
      "1400      1\n",
      "3112      1\n",
      "Name: 26, dtype: int64 \n",
      "\n",
      "27:  \n",
      " 0       299\n",
      "2209      1\n",
      "Name: 27, dtype: int64 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('25: ', '\\n', data.loc[:, '25'].value_counts(), '\\n')\n",
    "print('26: ', '\\n', data.loc[:, '26'].value_counts(), '\\n')\n",
    "print('27: ', '\\n', data.loc[:, '27'].value_counts(), '\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [],
   "source": [
    "def decod(number):\n",
    "    '''\n",
    "    Функция получает на вход число-склеиные характеристики поражения из столбца 25, 26 или 27.\n",
    "    Возвращает лист, элементы которого отдельные характеристики поражения\n",
    "    '''\n",
    "    sn = str(number)\n",
    "    if len(sn) == 4:\n",
    "        return list(sn)\n",
    "    elif len(sn) == 5:\n",
    "        if int(list(sn)[0]) not in [0, 1]:\n",
    "            res = list(sn)[:-2] + ['10']\n",
    "            return res\n",
    "        else:\n",
    "            cod = list(sn)\n",
    "            first = [cod[0] + cod[1]]\n",
    "            res = first + cod[2:]\n",
    "            return res\n",
    "    elif len(sn) == 6:\n",
    "        cod = list(sn)\n",
    "        res = [cod[0] + cod[1]] + cod[:-2] + ['10']\n",
    "        return res\n",
    "    elif len(sn) < 4:\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Создаем датафрейм из 4 столбцов-характеристик поражения\n",
    "lession_features = pd.DataFrame()\n",
    "bad_feature = data.loc[:, ['25', '26', '27']]\n",
    "for i in range(len(data)):\n",
    "    row = bad_feature.loc[i, :]\n",
    "    num = next((x for i, x in enumerate(row) if x), None)\n",
    "    if num and decod(num):\n",
    "        f = decod(num)\n",
    "        data_f = {'site of lession': int(f[0]), 'type of lession': int(f[1]), \n",
    "                  'subtype of lession': int(f[2]), 'specific code lession': int(f[3])}\n",
    "            \n",
    "    else:\n",
    "        data_f = {'site of lession': 0, 'type of lession': 0, \n",
    "                 'subtype of lession': 0, 'specific code lession': 0}\n",
    "    lession_features = pd.concat([lession_features, pd.DataFrame([data_f])])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Surgery</th>\n",
       "      <th>Age</th>\n",
       "      <th>Hospital Number</th>\n",
       "      <th>Rectal temperature</th>\n",
       "      <th>Pulse</th>\n",
       "      <th>Respiratory rate</th>\n",
       "      <th>temperature of extremities</th>\n",
       "      <th>peripheral pulse</th>\n",
       "      <th>mucous membranes</th>\n",
       "      <th>capillary refill time</th>\n",
       "      <th>...</th>\n",
       "      <th>total protein</th>\n",
       "      <th>abdominocentesis appearance</th>\n",
       "      <th>abdomcentesis total protein</th>\n",
       "      <th>outcome</th>\n",
       "      <th>surgical lesion</th>\n",
       "      <th>cp_data</th>\n",
       "      <th>site of lession</th>\n",
       "      <th>type of lession</th>\n",
       "      <th>subtype of lession</th>\n",
       "      <th>specific code lession</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530101</td>\n",
       "      <td>38.5</td>\n",
       "      <td>66.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>534817</td>\n",
       "      <td>39.2</td>\n",
       "      <td>88.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>85.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530334</td>\n",
       "      <td>38.3</td>\n",
       "      <td>40.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>5290409</td>\n",
       "      <td>39.1</td>\n",
       "      <td>164.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530255</td>\n",
       "      <td>37.3</td>\n",
       "      <td>104.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>295</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>533886</td>\n",
       "      <td>NaN</td>\n",
       "      <td>120.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>65.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>296</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>527702</td>\n",
       "      <td>37.2</td>\n",
       "      <td>72.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>297</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>529386</td>\n",
       "      <td>37.5</td>\n",
       "      <td>72.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>298</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530612</td>\n",
       "      <td>36.5</td>\n",
       "      <td>100.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>299</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>534618</td>\n",
       "      <td>37.2</td>\n",
       "      <td>40.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>62.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>300 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Surgery  Age  Hospital Number  Rectal temperature  Pulse  \\\n",
       "0        2.0    1           530101                38.5   66.0   \n",
       "1        1.0    1           534817                39.2   88.0   \n",
       "2        2.0    1           530334                38.3   40.0   \n",
       "3        1.0    9          5290409                39.1  164.0   \n",
       "4        2.0    1           530255                37.3  104.0   \n",
       "..       ...  ...              ...                 ...    ...   \n",
       "295      1.0    1           533886                 NaN  120.0   \n",
       "296      2.0    1           527702                37.2   72.0   \n",
       "297      1.0    1           529386                37.5   72.0   \n",
       "298      1.0    1           530612                36.5  100.0   \n",
       "299      1.0    1           534618                37.2   40.0   \n",
       "\n",
       "     Respiratory rate  temperature of extremities  peripheral pulse  \\\n",
       "0                28.0                         3.0               3.0   \n",
       "1                20.0                         NaN               NaN   \n",
       "2                24.0                         1.0               1.0   \n",
       "3                84.0                         4.0               1.0   \n",
       "4                35.0                         NaN               NaN   \n",
       "..                ...                         ...               ...   \n",
       "295              70.0                         4.0               NaN   \n",
       "296              24.0                         3.0               2.0   \n",
       "297              30.0                         4.0               3.0   \n",
       "298              24.0                         3.0               3.0   \n",
       "299              20.0                         NaN               NaN   \n",
       "\n",
       "     mucous membranes  capillary refill time  ...  total protein  \\\n",
       "0                 NaN                    2.0  ...            8.4   \n",
       "1                 4.0                    1.0  ...           85.0   \n",
       "2                 3.0                    1.0  ...            6.7   \n",
       "3                 6.0                    2.0  ...            7.2   \n",
       "4                 6.0                    2.0  ...            7.4   \n",
       "..                ...                    ...  ...            ...   \n",
       "295               4.0                    2.0  ...           65.0   \n",
       "296               4.0                    2.0  ...            NaN   \n",
       "297               4.0                    1.0  ...            6.8   \n",
       "298               3.0                    1.0  ...            6.0   \n",
       "299               NaN                    NaN  ...           62.0   \n",
       "\n",
       "     abdominocentesis appearance  abdomcentesis total protein  outcome  \\\n",
       "0                            NaN                          NaN      2.0   \n",
       "1                            2.0                          2.0      3.0   \n",
       "2                            NaN                          NaN      1.0   \n",
       "3                            3.0                          5.3      2.0   \n",
       "4                            NaN                          NaN      2.0   \n",
       "..                           ...                          ...      ...   \n",
       "295                          NaN                          NaN      3.0   \n",
       "296                          3.0                          3.3      3.0   \n",
       "297                          NaN                          NaN      2.0   \n",
       "298                          3.0                          3.4      1.0   \n",
       "299                          1.0                          1.0      3.0   \n",
       "\n",
       "     surgical lesion  cp_data  site of lession  type of lession  \\\n",
       "0                  2        2               11                3   \n",
       "1                  2        2                2                2   \n",
       "2                  2        1                0                0   \n",
       "3                  1        1                2                2   \n",
       "4                  2        2                4                3   \n",
       "..               ...      ...              ...              ...   \n",
       "295                2        2                3                2   \n",
       "296                1        1                2                2   \n",
       "297                1        2                3                2   \n",
       "298                1        1                2                2   \n",
       "299                2        2                6                1   \n",
       "\n",
       "     subtype of lession  specific code lession  \n",
       "0                     0                      0  \n",
       "1                     0                      8  \n",
       "2                     0                      0  \n",
       "3                     0                      8  \n",
       "4                     0                      0  \n",
       "..                  ...                    ...  \n",
       "295                   0                      5  \n",
       "296                   0                      8  \n",
       "297                   0                      5  \n",
       "298                   0                      8  \n",
       "299                   1                      2  \n",
       "\n",
       "[300 rows x 29 columns]"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Соединяем данные\n",
    "lession_features = lession_features.reset_index(drop=True)\n",
    "data = data.drop(['25', '26', '27'], axis = 1)\n",
    "data = pd.concat([data, lession_features], axis=1)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [],
   "source": [
    "#создадим списки из категориальных и вещественных признаков\n",
    "num_cols = ['Rectal temperature', 'Pulse', 'Respiratory rate', \n",
    "       'nasogastric reflux PH', 'packed cell volume', 'total protein', \n",
    "       'abdomcentesis total protein']\n",
    "cat_cols = ['Surgery', 'Age', 'Hospital Number', 'temperature of extremities', 'peripheral pulse', \n",
    "       'mucous membranes', 'capillary refill time', 'pain', 'peristalsis', \n",
    "       'abdominal distension', 'nasogastric tube', 'nasogastric reflux', \n",
    "       'rectal examination - feces', 'abdomen', 'abdominocentesis appearance', \n",
    "       'outcome', 'surgical lesion', 'site of lession', 'type of lession', \n",
    "       'subtype of lession', 'specific code lession', 'cp_data']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x1296 with 24 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#так как у категориальных величин бессмысленно считать среднее арифметическое, медиану, максимум, минимум и размах\n",
    "#(имеет смвсл только мода), то хорошо бы посмотреть на распределения\n",
    "fig, axes = plt.subplots(nrows=6, ncols=4, figsize=(18, 18))\n",
    "for idx, col in enumerate(cat_cols):\n",
    "    data.plot(y=col, subplots=True, kind=\"hist\", ax=axes[idx // 4, idx % 4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rectal temperature</th>\n",
       "      <th>Pulse</th>\n",
       "      <th>Respiratory rate</th>\n",
       "      <th>nasogastric reflux PH</th>\n",
       "      <th>packed cell volume</th>\n",
       "      <th>total protein</th>\n",
       "      <th>abdomcentesis total protein</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>240.000000</td>\n",
       "      <td>276.000000</td>\n",
       "      <td>242.000000</td>\n",
       "      <td>53.000000</td>\n",
       "      <td>271.000000</td>\n",
       "      <td>267.000000</td>\n",
       "      <td>102.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>38.167917</td>\n",
       "      <td>71.913043</td>\n",
       "      <td>30.417355</td>\n",
       "      <td>4.707547</td>\n",
       "      <td>46.295203</td>\n",
       "      <td>24.456929</td>\n",
       "      <td>3.019608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>0.732289</td>\n",
       "      <td>28.630557</td>\n",
       "      <td>17.642231</td>\n",
       "      <td>1.982311</td>\n",
       "      <td>10.419335</td>\n",
       "      <td>27.475009</td>\n",
       "      <td>1.968567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>35.400000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>37.800000</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>18.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>38.200000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>24.500000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>7.500000</td>\n",
       "      <td>2.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>38.500000</td>\n",
       "      <td>88.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>3.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>40.800000</td>\n",
       "      <td>184.000000</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>7.500000</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>89.000000</td>\n",
       "      <td>10.100000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Rectal temperature       Pulse  Respiratory rate  \\\n",
       "count          240.000000  276.000000        242.000000   \n",
       "mean            38.167917   71.913043         30.417355   \n",
       "std              0.732289   28.630557         17.642231   \n",
       "min             35.400000   30.000000          8.000000   \n",
       "25%             37.800000   48.000000         18.500000   \n",
       "50%             38.200000   64.000000         24.500000   \n",
       "75%             38.500000   88.000000         36.000000   \n",
       "max             40.800000  184.000000         96.000000   \n",
       "\n",
       "       nasogastric reflux PH  packed cell volume  total protein  \\\n",
       "count              53.000000          271.000000     267.000000   \n",
       "mean                4.707547           46.295203      24.456929   \n",
       "std                 1.982311           10.419335      27.475009   \n",
       "min                 1.000000           23.000000       3.300000   \n",
       "25%                 3.000000           38.000000       6.500000   \n",
       "50%                 5.000000           45.000000       7.500000   \n",
       "75%                 6.500000           52.000000      57.000000   \n",
       "max                 7.500000           75.000000      89.000000   \n",
       "\n",
       "       abdomcentesis total protein  \n",
       "count                   102.000000  \n",
       "mean                      3.019608  \n",
       "std                       1.968567  \n",
       "min                       0.100000  \n",
       "25%                       2.000000  \n",
       "50%                       2.250000  \n",
       "75%                       3.900000  \n",
       "max                      10.100000  "
      ]
     },
     "execution_count": 290,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#посмотрим на базовые метрики\n",
    "data[num_cols].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Размaх: \n",
      " Rectal temperature               5.4\n",
      "Pulse                          154.0\n",
      "Respiratory rate                88.0\n",
      "nasogastric reflux PH            6.5\n",
      "packed cell volume              52.0\n",
      "total protein                   85.7\n",
      "abdomcentesis total protein     10.0\n",
      "dtype: float64\n",
      "Мода: \n",
      "    Rectal temperature  Pulse  Respiratory rate  nasogastric reflux PH  \\\n",
      "0                38.0   48.0              20.0                    2.0   \n",
      "1                 NaN    NaN               NaN                    NaN   \n",
      "\n",
      "   packed cell volume  total protein  abdomcentesis total protein  \n",
      "0                37.0            6.5                          2.0  \n",
      "1                50.0            7.0                          NaN  \n"
     ]
    }
   ],
   "source": [
    "#также найдем моду и размах\n",
    "range_ = data[num_cols].max() - data[num_cols].min()\n",
    "mode = data[num_cols].mode()\n",
    "print('Размaх:', '\\n', range_)\n",
    "print('Мода:', '\\n', mode)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Среднее значение температуры близко к нормальной (37.8), и все выборка сконцентрирована около среднего значения (значение СКО меньше 1 подтверждает этот факт). А значит выбросом могут считаться и те значения, которые откличются от среднего не пару градусов.\n",
    "2. Значение пульса, начиная от 1 квартили, выше нормы (30-40) и может свидетельствовать, что у большинства живаотных наблюдается болезненные поражениями или они страдают от шока кровообращения. Это также подтверждает значение моды. Кроме этого имеет высокоие значения СКО и размах - выборка по данному критерию очень разношерстная.\n",
    "3. Частота дыхания по всем метрикам сильно превышает норму (8-10), но в описании изначально было оговорено, что польза данного признака сомнительна, в виду больших колебаний. Но все таки стоит зафиксировать, что среднее значение выше нормы в 3 раза, а мода в 2.\n",
    "4. Сразу бросается в глаза, что столбец \"nasogastric reflux PH\" содержит меньше всего элементов. Уже сейчас стоит задуматься над тем, чтобы убрать его из данных.\n",
    "5. Так как 3 квартиль превышает норму packed cell volume (30-50) всего на несколько единиц, можно судить о том, что большая часть выборки не имеет явных нарушений по данному параметру. Интересно заметить, что данный параметр имеет 2 моды: 37 и 50, обе из которых укладываются в диапазон нормальных значений.\n",
    "6. Средний уровень белка сильно выше нормы (6-7.5), но в данном случае это обусловлено очень большими значениями отдельной, не слишком большой подгруппой в выборке. Это подтверждается значениями моды (6.6 и 7), а также первыми двумя квартилями, т.е. как минимум половина лошадей имеют нормальный уровень белка. По размаху также можно судить, что, относительно нормальных значений, величина размаха очень велика.\n",
    "7. Прзнак, отвечающий за белок брюшной полости, содержит немногим больше 30% заполненных значений. Это тоже можно отнести к случаю \"слишшком мало данных\". Возможно (я не лошадиных хирург, я не знаю), значения можно восстановить по среднему уровню белка. Но если эти признаки иеют высокую корреляцию, то, мне кажется, от повторяющего при малом количестве данных можно избавиться.\n",
    "\n",
    "Общий вывод:\n",
    "    Так как мы не строим корреляции между признаками и целевой переменной и не можем понять, какой вклад вносит каждый из них, то можем судить только о выборке в целом. Значение пульса и частота дыхания-это показатели, которые у большей части группы не укладываются в норму. Белок тоже сильно повышен, но уже у конкретной подгруппы в выборке."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Задание 2. Работа с выбросами\n",
    "\n",
    "В выбранных числовых столбцах найти выбросы, выдвинуть гипотезы об их причинах и проинтерпретировать результаты. Принять и обосновать решение о дальнейшей работе с ними."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a24791b90>"
      ]
     },
     "execution_count": 292,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Легче всего начально оценить выбросы можно построив ящик с усами\n",
    "#построим 2 графика, чтобы учесть разницу величин значений\n",
    "data.boxplot(['Pulse', 'Respiratory rate', 'packed cell volume', 'total protein'], figsize=(10, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2484a450>"
      ]
     },
     "execution_count": 293,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 5))\n",
    "\n",
    "data.boxplot('Rectal temperature', ax=axes[0])\n",
    "data.boxplot(['nasogastric reflux PH', 'abdomcentesis total protein'], ax=axes[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сразу видим, что признаки nasogastric reflux PH и total protein не имеют выбросов. Убедимся в этом, написав функцию, которая возвращает dataframe с выбросами."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [],
   "source": [
    "def quartile_range(col):\n",
    "    q1 = data[col].quantile(0.25)\n",
    "    q3 = data[col].quantile(0.75)\n",
    "    iqr = q3 - q1\n",
    "    lower_bound = q1 - (1.5 * iqr) \n",
    "    upper_bound = q3 + (1.5 * iqr)\n",
    "    res = data.loc[(data[col].between(lower_bound, upper_bound) == False) & (data[col].isna() == False)]\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 295,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(quartile_range('total protein')) == len(quartile_range('nasogastric reflux PH')) == 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Оценим относительное изменение среднего арифметического при удалении выбросов, как метрику, наболее подверженную изменению при удалении выбросов\n",
    "#Напишем функцию\n",
    "def change_mean(col):\n",
    "    blowout_data = quartile_range(col)\n",
    "    data_without_blowout = pd.concat([data, blowout_data]).drop_duplicates(keep=False)\n",
    "    return round((data.mean() - data_without_blowout.mean()) / data.mean(), 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Surgery                        0.00\n",
      "Age                            0.07\n",
      "Hospital Number                0.06\n",
      "Rectal temperature             0.00\n",
      "Pulse                          0.02\n",
      "Respiratory rate               0.02\n",
      "temperature of extremities     0.01\n",
      "peripheral pulse              -0.00\n",
      "mucous membranes               0.01\n",
      "capillary refill time          0.00\n",
      "pain                           0.00\n",
      "peristalsis                   -0.00\n",
      "abdominal distension           0.00\n",
      "nasogastric tube              -0.01\n",
      "nasogastric reflux            -0.00\n",
      "nasogastric reflux PH          0.00\n",
      "rectal examination - feces    -0.01\n",
      "abdomen                       -0.01\n",
      "packed cell volume            -0.00\n",
      "total protein                 -0.02\n",
      "abdominocentesis appearance    0.00\n",
      "abdomcentesis total protein   -0.00\n",
      "outcome                        0.00\n",
      "surgical lesion               -0.00\n",
      "cp_data                       -0.00\n",
      "site of lession                0.01\n",
      "type of lession                0.00\n",
      "subtype of lession            -0.01\n",
      "specific code lession         -0.01\n",
      "dtype: float64\n",
      "\n",
      "Количество выбросов =  5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Surgery</th>\n",
       "      <th>Age</th>\n",
       "      <th>Hospital Number</th>\n",
       "      <th>Rectal temperature</th>\n",
       "      <th>Pulse</th>\n",
       "      <th>Respiratory rate</th>\n",
       "      <th>temperature of extremities</th>\n",
       "      <th>peripheral pulse</th>\n",
       "      <th>mucous membranes</th>\n",
       "      <th>capillary refill time</th>\n",
       "      <th>...</th>\n",
       "      <th>total protein</th>\n",
       "      <th>abdominocentesis appearance</th>\n",
       "      <th>abdomcentesis total protein</th>\n",
       "      <th>outcome</th>\n",
       "      <th>surgical lesion</th>\n",
       "      <th>cp_data</th>\n",
       "      <th>site of lession</th>\n",
       "      <th>type of lession</th>\n",
       "      <th>subtype of lession</th>\n",
       "      <th>specific code lession</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>5290409</td>\n",
       "      <td>39.1</td>\n",
       "      <td>164.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>41</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9</td>\n",
       "      <td>5288249</td>\n",
       "      <td>39.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>8.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>55</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>5282839</td>\n",
       "      <td>38.6</td>\n",
       "      <td>160.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>5294539</td>\n",
       "      <td>38.8</td>\n",
       "      <td>184.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>275</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>5297159</td>\n",
       "      <td>38.8</td>\n",
       "      <td>150.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Surgery  Age  Hospital Number  Rectal temperature  Pulse  \\\n",
       "3        1.0    9          5290409                39.1  164.0   \n",
       "41       2.0    9          5288249                39.0  150.0   \n",
       "55       1.0    9          5282839                38.6  160.0   \n",
       "255      1.0    9          5294539                38.8  184.0   \n",
       "275      1.0    9          5297159                38.8  150.0   \n",
       "\n",
       "     Respiratory rate  temperature of extremities  peripheral pulse  \\\n",
       "3                84.0                         4.0               1.0   \n",
       "41               72.0                         NaN               NaN   \n",
       "55               20.0                         3.0               NaN   \n",
       "255              84.0                         1.0               NaN   \n",
       "275              50.0                         1.0               3.0   \n",
       "\n",
       "     mucous membranes  capillary refill time  ...  total protein  \\\n",
       "3                 6.0                    2.0  ...            7.2   \n",
       "41                NaN                    NaN  ...            8.5   \n",
       "55                5.0                    1.0  ...            NaN   \n",
       "255               1.0                    1.0  ...            3.3   \n",
       "275               6.0                    2.0  ...            6.2   \n",
       "\n",
       "     abdominocentesis appearance  abdomcentesis total protein  outcome  \\\n",
       "3                            3.0                          5.3      2.0   \n",
       "41                           NaN                          0.1      1.0   \n",
       "55                           2.0                          NaN      2.0   \n",
       "255                          NaN                          NaN      2.0   \n",
       "275                          NaN                          NaN      2.0   \n",
       "\n",
       "     surgical lesion  cp_data  site of lession  type of lession  \\\n",
       "3                  1        1                2                2   \n",
       "41                 1        1                9                4   \n",
       "55                 1        1                7                1   \n",
       "255                1        2                7                1   \n",
       "275                1        2                4                2   \n",
       "\n",
       "     subtype of lession  specific code lession  \n",
       "3                     0                      8  \n",
       "41                    0                      0  \n",
       "55                    1                      1  \n",
       "255                   1                      1  \n",
       "275                   0                      7  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Pulse\n",
    "print(change_mean('Pulse'))\n",
    "print()\n",
    "print('Количество выбросов = ', len(quartile_range('Pulse')))\n",
    "quartile_range('Pulse')\n",
    "\n",
    "#Выбросов совсем немного и относительное изменение совсем небольшое. Их можно иставить. Это могут быть просто действительные нестандартные случаи"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Surgery                       -0.01\n",
      "Age                            0.11\n",
      "Hospital Number                0.09\n",
      "Rectal temperature             0.00\n",
      "Pulse                          0.02\n",
      "Respiratory rate               0.12\n",
      "temperature of extremities     0.01\n",
      "peripheral pulse              -0.01\n",
      "mucous membranes              -0.01\n",
      "capillary refill time         -0.00\n",
      "pain                          -0.01\n",
      "peristalsis                   -0.00\n",
      "abdominal distension          -0.01\n",
      "nasogastric tube              -0.01\n",
      "nasogastric reflux             0.00\n",
      "nasogastric reflux PH          0.01\n",
      "rectal examination - feces    -0.02\n",
      "abdomen                       -0.01\n",
      "packed cell volume            -0.00\n",
      "total protein                 -0.02\n",
      "abdominocentesis appearance   -0.00\n",
      "abdomcentesis total protein   -0.01\n",
      "outcome                       -0.00\n",
      "surgical lesion               -0.01\n",
      "cp_data                        0.00\n",
      "site of lession                0.03\n",
      "type of lession                0.01\n",
      "subtype of lession            -0.02\n",
      "specific code lession          0.02\n",
      "dtype: float64\n",
      "\n",
      "Количество выбросов =  17\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Surgery</th>\n",
       "      <th>Age</th>\n",
       "      <th>Hospital Number</th>\n",
       "      <th>Rectal temperature</th>\n",
       "      <th>Pulse</th>\n",
       "      <th>Respiratory rate</th>\n",
       "      <th>temperature of extremities</th>\n",
       "      <th>peripheral pulse</th>\n",
       "      <th>mucous membranes</th>\n",
       "      <th>capillary refill time</th>\n",
       "      <th>...</th>\n",
       "      <th>total protein</th>\n",
       "      <th>abdominocentesis appearance</th>\n",
       "      <th>abdomcentesis total protein</th>\n",
       "      <th>outcome</th>\n",
       "      <th>surgical lesion</th>\n",
       "      <th>cp_data</th>\n",
       "      <th>site of lession</th>\n",
       "      <th>type of lession</th>\n",
       "      <th>subtype of lession</th>\n",
       "      <th>specific code lession</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>106</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>528668</td>\n",
       "      <td>38.3</td>\n",
       "      <td>52.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>5277409</td>\n",
       "      <td>39.2</td>\n",
       "      <td>146.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>269</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>527883</td>\n",
       "      <td>39.3</td>\n",
       "      <td>64.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>186</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5278331</td>\n",
       "      <td>39.3</td>\n",
       "      <td>64.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>244</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>5291409</td>\n",
       "      <td>38.2</td>\n",
       "      <td>124.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Surgery  Age  Hospital Number  Rectal temperature  Pulse  \\\n",
       "106      1.0    1           528668                38.3   52.0   \n",
       "39       1.0    9          5277409                39.2  146.0   \n",
       "269      1.0    1           527883                39.3   64.0   \n",
       "186      1.0    1          5278331                39.3   64.0   \n",
       "244      1.0    9          5291409                38.2  124.0   \n",
       "\n",
       "     Respiratory rate  temperature of extremities  peripheral pulse  \\\n",
       "106              96.0                         NaN               3.0   \n",
       "39               96.0                         NaN               NaN   \n",
       "269              90.0                         2.0               3.0   \n",
       "186              90.0                         2.0               3.0   \n",
       "244              88.0                         1.0               3.0   \n",
       "\n",
       "     mucous membranes  capillary refill time  ...  total protein  \\\n",
       "106               3.0                    1.0  ...            6.1   \n",
       "39                NaN                    NaN  ...            NaN   \n",
       "269               1.0                    1.0  ...            6.7   \n",
       "186               1.0                    1.0  ...            6.7   \n",
       "244               2.0                    1.0  ...            8.0   \n",
       "\n",
       "     abdominocentesis appearance  abdomcentesis total protein  outcome  \\\n",
       "106                          NaN                          NaN      1.0   \n",
       "39                           NaN                          NaN      2.0   \n",
       "269                          NaN                          NaN      1.0   \n",
       "186                          NaN                          NaN      1.0   \n",
       "244                          1.0                          NaN      1.0   \n",
       "\n",
       "     surgical lesion  cp_data  site of lession  type of lession  \\\n",
       "106                1        1                3                2   \n",
       "39                 1        2                2                1   \n",
       "269                1        2                3                1   \n",
       "186                1        2                2                1   \n",
       "244                1        1                9                4   \n",
       "\n",
       "     subtype of lession  specific code lession  \n",
       "106                   0                      9  \n",
       "39                    1                      3  \n",
       "269                   1                     10  \n",
       "186                   1                     10  \n",
       "244                   0                      0  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Respiratory rate\n",
    "print(change_mean('Respiratory rate'))\n",
    "print()\n",
    "print('Количество выбросов = ', len(quartile_range('Respiratory rate')))\n",
    "quartile_range('Respiratory rate').sort_values('Respiratory rate', ascending=False).head() \n",
    "\n",
    "#Эти выбросы можно обосновать большими колебаниями величины (мб измерений, мб фактически, в описании не уточнено)\n",
    "#При удалении выбросов величина Respiratory rate уменьшается на 12%, так как выбросы имеют крайне высокое значение. Так как изначально\n",
    "#полезность данной характеристики была помечена как \"сомнительная\", можно оставить выбросы, чтобы не терять данные по остальным столбцам.\n",
    "#Если же будет принято решение учитывать эту характеристику как полезную, то лучше было бы удалить выбросы."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Surgery                        0.00\n",
      "Age                           -0.01\n",
      "Hospital Number               -0.01\n",
      "Rectal temperature            -0.00\n",
      "Pulse                         -0.00\n",
      "Respiratory rate               0.00\n",
      "temperature of extremities     0.01\n",
      "peripheral pulse              -0.00\n",
      "mucous membranes               0.01\n",
      "capillary refill time          0.00\n",
      "pain                           0.00\n",
      "peristalsis                    0.00\n",
      "abdominal distension          -0.00\n",
      "nasogastric tube              -0.00\n",
      "nasogastric reflux             0.00\n",
      "nasogastric reflux PH         -0.01\n",
      "rectal examination - feces    -0.00\n",
      "abdomen                       -0.01\n",
      "packed cell volume             0.01\n",
      "total protein                  0.00\n",
      "abdominocentesis appearance    0.00\n",
      "abdomcentesis total protein    0.00\n",
      "outcome                        0.00\n",
      "surgical lesion                0.01\n",
      "cp_data                        0.00\n",
      "site of lession               -0.01\n",
      "type of lession                0.00\n",
      "subtype of lession            -0.02\n",
      "specific code lession         -0.01\n",
      "dtype: float64\n",
      "\n",
      "Количество выбросов =  3\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>peristalsis</th>\n",
       "      <th>abdominal distension</th>\n",
       "      <th>nasogastric tube</th>\n",
       "      <th>nasogastric reflux</th>\n",
       "      <th>nasogastric reflux PH</th>\n",
       "      <th>rectal examination - feces</th>\n",
       "      <th>abdomen</th>\n",
       "      <th>packed cell volume</th>\n",
       "      <th>total protein</th>\n",
       "      <th>abdominocentesis appearance</th>\n",
       "      <th>abdomcentesis total protein</th>\n",
       "      <th>outcome</th>\n",
       "      <th>surgical lesion</th>\n",
       "      <th>cp_data</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>74.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>144</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>151</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     peristalsis  abdominal distension  nasogastric tube  nasogastric reflux  \\\n",
       "4            NaN                   NaN               NaN                 NaN   \n",
       "144          4.0                   4.0               3.0                 2.0   \n",
       "151          4.0                   2.0               1.0                 3.0   \n",
       "\n",
       "     nasogastric reflux PH  rectal examination - feces  abdomen  \\\n",
       "4                      NaN                         NaN      NaN   \n",
       "144                    2.0                         4.0      5.0   \n",
       "151                    4.0                         4.0      4.0   \n",
       "\n",
       "     packed cell volume  total protein  abdominocentesis appearance  \\\n",
       "4                  74.0            7.4                          NaN   \n",
       "144                75.0           81.0                          NaN   \n",
       "151                75.0            NaN                          3.0   \n",
       "\n",
       "     abdomcentesis total protein  outcome  surgical lesion  cp_data  \n",
       "4                            NaN      2.0                2        2  \n",
       "144                          NaN      3.0                2        2  \n",
       "151                          4.3      2.0                1        1  "
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#packed cell volume\n",
    "print(change_mean('packed cell volume'))\n",
    "print()\n",
    "print('Количество выбросов = ', len(quartile_range('packed cell volume')))\n",
    "quartile_range('packed cell volume').loc[:, 'peristalsis':'cp_data']\n",
    "\n",
    "#3 значения, очень близкие к границам межквартильного размаха. Мб при них была большая погрешность измерения. \n",
    "#Они не сильно влияют на общую картину. Не будем удалять, чтобы не терять данные."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Surgery                        0.01\n",
      "Age                           -0.00\n",
      "Hospital Number               -0.03\n",
      "Rectal temperature            -0.00\n",
      "Pulse                          0.01\n",
      "Respiratory rate               0.01\n",
      "temperature of extremities     0.01\n",
      "peripheral pulse               0.02\n",
      "mucous membranes               0.01\n",
      "capillary refill time          0.00\n",
      "pain                          -0.00\n",
      "peristalsis                    0.00\n",
      "abdominal distension          -0.01\n",
      "nasogastric tube              -0.00\n",
      "nasogastric reflux            -0.02\n",
      "nasogastric reflux PH          0.02\n",
      "rectal examination - feces    -0.00\n",
      "abdomen                       -0.00\n",
      "packed cell volume             0.01\n",
      "total protein                 -0.02\n",
      "abdominocentesis appearance    0.03\n",
      "abdomcentesis total protein    0.00\n",
      "outcome                        0.01\n",
      "surgical lesion               -0.00\n",
      "cp_data                       -0.01\n",
      "site of lession                0.02\n",
      "type of lession                0.03\n",
      "subtype of lession            -0.03\n",
      "specific code lession         -0.02\n",
      "dtype: float64\n",
      "\n",
      "Количество выбросов =  14\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Surgery</th>\n",
       "      <th>Age</th>\n",
       "      <th>Hospital Number</th>\n",
       "      <th>Rectal temperature</th>\n",
       "      <th>Pulse</th>\n",
       "      <th>Respiratory rate</th>\n",
       "      <th>temperature of extremities</th>\n",
       "      <th>peripheral pulse</th>\n",
       "      <th>mucous membranes</th>\n",
       "      <th>capillary refill time</th>\n",
       "      <th>...</th>\n",
       "      <th>total protein</th>\n",
       "      <th>abdominocentesis appearance</th>\n",
       "      <th>abdomcentesis total protein</th>\n",
       "      <th>outcome</th>\n",
       "      <th>surgical lesion</th>\n",
       "      <th>cp_data</th>\n",
       "      <th>site of lession</th>\n",
       "      <th>type of lession</th>\n",
       "      <th>subtype of lession</th>\n",
       "      <th>specific code lession</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>259</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>527734</td>\n",
       "      <td>40.8</td>\n",
       "      <td>72.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>54</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>529461</td>\n",
       "      <td>40.3</td>\n",
       "      <td>114.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>91</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>529461</td>\n",
       "      <td>40.3</td>\n",
       "      <td>114.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>281</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530624</td>\n",
       "      <td>40.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530157</td>\n",
       "      <td>39.9</td>\n",
       "      <td>72.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>534092</td>\n",
       "      <td>39.7</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>57.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>99</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530002</td>\n",
       "      <td>39.6</td>\n",
       "      <td>108.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>251</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>527940</td>\n",
       "      <td>36.6</td>\n",
       "      <td>42.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>118</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>533983</td>\n",
       "      <td>36.5</td>\n",
       "      <td>78.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>75.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>298</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530612</td>\n",
       "      <td>36.5</td>\n",
       "      <td>100.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>80</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>527518</td>\n",
       "      <td>36.4</td>\n",
       "      <td>98.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>238</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>528702</td>\n",
       "      <td>36.1</td>\n",
       "      <td>88.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.8</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>141</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>522979</td>\n",
       "      <td>36.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>44</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>535407</td>\n",
       "      <td>35.4</td>\n",
       "      <td>140.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>69.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Surgery  Age  Hospital Number  Rectal temperature  Pulse  \\\n",
       "259      1.0    1           527734                40.8   72.0   \n",
       "54       2.0    1           529461                40.3  114.0   \n",
       "91       2.0    1           529461                40.3  114.0   \n",
       "281      2.0    1           530624                40.0   78.0   \n",
       "20       1.0    1           530157                39.9   72.0   \n",
       "75       1.0    9           534092                39.7  100.0   \n",
       "99       2.0    1           530002                39.6  108.0   \n",
       "251      2.0    1           527940                36.6   42.0   \n",
       "118      1.0    1           533983                36.5   78.0   \n",
       "298      1.0    1           530612                36.5  100.0   \n",
       "80       1.0    1           527518                36.4   98.0   \n",
       "238      2.0    1           528702                36.1   88.0   \n",
       "141      2.0    1           522979                36.0   42.0   \n",
       "44       1.0    1           535407                35.4  140.0   \n",
       "\n",
       "     Respiratory rate  temperature of extremities  peripheral pulse  \\\n",
       "259              42.0                         3.0               3.0   \n",
       "54               36.0                         3.0               3.0   \n",
       "91               36.0                         3.0               3.0   \n",
       "281               NaN                         3.0               3.0   \n",
       "20               60.0                         1.0               1.0   \n",
       "75                NaN                         3.0               3.0   \n",
       "99               51.0                         3.0               3.0   \n",
       "251              18.0                         3.0               3.0   \n",
       "118              30.0                         1.0               NaN   \n",
       "298              24.0                         3.0               3.0   \n",
       "80               35.0                         3.0               3.0   \n",
       "238               NaN                         3.0               3.0   \n",
       "141              30.0                         NaN               NaN   \n",
       "44               24.0                         3.0               3.0   \n",
       "\n",
       "     mucous membranes  capillary refill time  ...  total protein  \\\n",
       "259               1.0                    1.0  ...            7.4   \n",
       "54                1.0                    2.0  ...            8.1   \n",
       "91                1.0                    2.0  ...            8.1   \n",
       "281               5.0                    1.0  ...            6.5   \n",
       "20                5.0                    2.0  ...            6.1   \n",
       "75                5.0                    2.0  ...           57.0   \n",
       "99                6.0                    2.0  ...            8.0   \n",
       "251               2.0                    1.0  ...            7.1   \n",
       "118               1.0                    1.0  ...           75.0   \n",
       "298               3.0                    1.0  ...            6.0   \n",
       "80                4.0                    1.0  ...            6.4   \n",
       "238               3.0                    1.0  ...            7.0   \n",
       "141               5.0                    1.0  ...            6.8   \n",
       "44                4.0                    2.0  ...           69.0   \n",
       "\n",
       "     abdominocentesis appearance  abdomcentesis total protein  outcome  \\\n",
       "259                          3.0                          NaN      2.0   \n",
       "54                           3.0                          4.5      3.0   \n",
       "91                           3.0                          4.5      2.0   \n",
       "281                          NaN                          NaN      2.0   \n",
       "20                           2.0                          NaN      1.0   \n",
       "75                           2.0                          2.0      3.0   \n",
       "99                           2.0                          2.6      1.0   \n",
       "251                          NaN                          NaN      2.0   \n",
       "118                          2.0                          1.0      1.0   \n",
       "298                          3.0                          3.4      1.0   \n",
       "80                           3.0                          3.6      2.0   \n",
       "238                          3.0                          4.8      3.0   \n",
       "141                          NaN                          NaN      2.0   \n",
       "44                           3.0                          2.0      3.0   \n",
       "\n",
       "     surgical lesion  cp_data  site of lession  type of lession  \\\n",
       "259                1        1               11                4   \n",
       "54                 1        1                7                4   \n",
       "91                 1        1                3                2   \n",
       "281                1        1                8                4   \n",
       "20                 1        2                2                1   \n",
       "75                 1        2                1                4   \n",
       "99                 2        1                4                3   \n",
       "251                1        2                5                1   \n",
       "118                1        2                3                1   \n",
       "298                1        1                2                2   \n",
       "80                 1        1                2                2   \n",
       "238                1        1                2                2   \n",
       "141                2        2                1                4   \n",
       "44                 1        2                3                2   \n",
       "\n",
       "     subtype of lession  specific code lession  \n",
       "259                   0                      0  \n",
       "54                    0                      0  \n",
       "91                    0                      5  \n",
       "281                   0                      0  \n",
       "20                    1                      1  \n",
       "75                    0                      0  \n",
       "99                    0                      0  \n",
       "251                   1                      1  \n",
       "118                   1                      2  \n",
       "298                   0                      8  \n",
       "80                    0                      5  \n",
       "238                   0                      9  \n",
       "141                   0                      0  \n",
       "44                    0                      5  \n",
       "\n",
       "[14 rows x 29 columns]"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Rectal temperature\n",
    "print(change_mean('Rectal temperature'))\n",
    "print()\n",
    "print('Количество выбросов = ', len(quartile_range('Rectal temperature')))\n",
    "quartile_range('Rectal temperature').sort_values('Rectal temperature', ascending=False) \n",
    "\n",
    "#Выбросов достаточно много, но, т.к. они \"равномерно\" распределены с обоих границ от квартильного разамаха, то влияют на с.а. незначительно. \n",
    "#Квартильный размах совсем небольшой, данные сконцентрированны около медианы, так что выбросы отличаются от среднего всего на несколько градусов.\n",
    "#Также говорилось о том, что значения температуры у больного животного может меняться с большой на маленькую и обратно.\n",
    "#Возможно, мы наблюдаем скачки температуры у больных животных. Данные удалять не стоит."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Surgery                        0.00\n",
      "Age                           -0.01\n",
      "Hospital Number               -0.02\n",
      "Rectal temperature            -0.00\n",
      "Pulse                         -0.00\n",
      "Respiratory rate              -0.01\n",
      "temperature of extremities     0.00\n",
      "peripheral pulse              -0.01\n",
      "mucous membranes              -0.01\n",
      "capillary refill time         -0.00\n",
      "pain                          -0.01\n",
      "peristalsis                   -0.00\n",
      "abdominal distension          -0.01\n",
      "nasogastric tube              -0.00\n",
      "nasogastric reflux            -0.01\n",
      "nasogastric reflux PH          0.01\n",
      "rectal examination - feces    -0.01\n",
      "abdomen                       -0.02\n",
      "packed cell volume             0.00\n",
      "total protein                 -0.02\n",
      "abdominocentesis appearance   -0.00\n",
      "abdomcentesis total protein    0.12\n",
      "outcome                       -0.00\n",
      "surgical lesion                0.01\n",
      "cp_data                       -0.01\n",
      "site of lession               -0.02\n",
      "type of lession               -0.02\n",
      "subtype of lession            -0.01\n",
      "specific code lession         -0.02\n",
      "dtype: float64\n",
      "\n",
      "Количество выбросов =  7\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Surgery</th>\n",
       "      <th>Age</th>\n",
       "      <th>Hospital Number</th>\n",
       "      <th>Rectal temperature</th>\n",
       "      <th>Pulse</th>\n",
       "      <th>Respiratory rate</th>\n",
       "      <th>temperature of extremities</th>\n",
       "      <th>peripheral pulse</th>\n",
       "      <th>mucous membranes</th>\n",
       "      <th>capillary refill time</th>\n",
       "      <th>...</th>\n",
       "      <th>total protein</th>\n",
       "      <th>abdominocentesis appearance</th>\n",
       "      <th>abdomcentesis total protein</th>\n",
       "      <th>outcome</th>\n",
       "      <th>surgical lesion</th>\n",
       "      <th>cp_data</th>\n",
       "      <th>site of lession</th>\n",
       "      <th>type of lession</th>\n",
       "      <th>subtype of lession</th>\n",
       "      <th>specific code lession</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530242</td>\n",
       "      <td>37.2</td>\n",
       "      <td>108.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>71</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>529424</td>\n",
       "      <td>37.8</td>\n",
       "      <td>48.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5.9</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>113</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>527933</td>\n",
       "      <td>36.8</td>\n",
       "      <td>60.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>143</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>529424</td>\n",
       "      <td>37.8</td>\n",
       "      <td>48.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5.9</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>211</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>529893</td>\n",
       "      <td>38.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>225</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>528931</td>\n",
       "      <td>38.4</td>\n",
       "      <td>54.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>284</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>530439</td>\n",
       "      <td>38.5</td>\n",
       "      <td>54.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Surgery  Age  Hospital Number  Rectal temperature  Pulse  \\\n",
       "31       2.0    1           530242                37.2  108.0   \n",
       "71       1.0    1           529424                37.8   48.0   \n",
       "113      1.0    1           527933                36.8   60.0   \n",
       "143      1.0    1           529424                37.8   48.0   \n",
       "211      1.0    1           529893                38.0   86.0   \n",
       "225      2.0    1           528931                38.4   54.0   \n",
       "284      2.0    1           530439                38.5   54.0   \n",
       "\n",
       "     Respiratory rate  temperature of extremities  peripheral pulse  \\\n",
       "31               12.0                         3.0               3.0   \n",
       "71               28.0                         1.0               1.0   \n",
       "113              28.0                         NaN               NaN   \n",
       "143              28.0                         1.0               1.0   \n",
       "211              24.0                         4.0               3.0   \n",
       "225              24.0                         1.0               1.0   \n",
       "284               NaN                         1.0               1.0   \n",
       "\n",
       "     mucous membranes  capillary refill time  ...  total protein  \\\n",
       "31                4.0                    2.0  ...            8.2   \n",
       "71                1.0                    1.0  ...            5.9   \n",
       "113               NaN                    NaN  ...            NaN   \n",
       "143               1.0                    2.0  ...            5.9   \n",
       "211               4.0                    1.0  ...            5.5   \n",
       "225               1.0                    1.0  ...            7.2   \n",
       "284               1.0                    1.0  ...            6.8   \n",
       "\n",
       "     abdominocentesis appearance  abdomcentesis total protein  outcome  \\\n",
       "31                           3.0                          7.4      3.0   \n",
       "71                           2.0                          7.0      1.0   \n",
       "113                          NaN                         10.0      2.0   \n",
       "143                          2.0                          7.0      1.0   \n",
       "211                          1.0                         10.1      2.0   \n",
       "225                          1.0                          8.0      1.0   \n",
       "284                          2.0                          7.0      1.0   \n",
       "\n",
       "     surgical lesion  cp_data  site of lession  type of lession  \\\n",
       "31                 1        1                2                2   \n",
       "71                 2        1                0                0   \n",
       "113                1        1                3                2   \n",
       "143                2        1                0                0   \n",
       "211                1        1                3                1   \n",
       "225                2        1                3                1   \n",
       "284                2        1                0                0   \n",
       "\n",
       "     subtype of lession  specific code lession  \n",
       "31                    0                      7  \n",
       "71                    0                      0  \n",
       "113                   0                      5  \n",
       "143                   0                      0  \n",
       "211                   1                      1  \n",
       "225                   1                      1  \n",
       "284                   0                      0  \n",
       "\n",
       "[7 rows x 29 columns]"
      ]
     },
     "execution_count": 302,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#abdomcentesis total protein\n",
    "print(change_mean('abdomcentesis total protein'))\n",
    "print()\n",
    "print('Количество выбросов = ', len(quartile_range('abdomcentesis total protein')))\n",
    "quartile_range('abdomcentesis total protein')\n",
    "\n",
    "#Судить о выбросах сложно, так как у нас не так уж много значений. В описании не сказан нормальный уровень, а лишь то, что \n",
    "#с увеличением этого показателя возрастает риск поражения кишечника. Мб эти выбросы как раз и являются типичными случаями поражения кишечника."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Задание 3. Работа с пропусками\n",
    "\n",
    "Рассчитать количество выбросов для всех выбранных столбцов. Принять и обосновать решение о методе работы с пропусками по каждому столбцу, сформировать датафрейм, в котором пропуски будут отсутствовать."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Surgery - 0.3%\n",
      "Age - 0.0%\n",
      "Hospital Number - 0.0%\n",
      "Rectal temperature - 20.0%\n",
      "Pulse - 8.0%\n",
      "Respiratory rate - 19.3%\n",
      "temperature of extremities - 18.7%\n",
      "peripheral pulse - 23.0%\n",
      "mucous membranes - 15.7%\n",
      "capillary refill time - 10.7%\n",
      "pain - 18.3%\n",
      "peristalsis - 14.7%\n",
      "abdominal distension - 18.7%\n",
      "nasogastric tube - 34.7%\n",
      "nasogastric reflux - 35.3%\n",
      "nasogastric reflux PH - 82.3%\n",
      "rectal examination - feces - 34.0%\n",
      "abdomen - 39.3%\n",
      "packed cell volume - 9.7%\n",
      "total protein - 11.0%\n",
      "abdominocentesis appearance - 55.0%\n",
      "abdomcentesis total protein - 66.0%\n",
      "outcome - 0.3%\n",
      "surgical lesion - 0.0%\n",
      "cp_data - 0.0%\n",
      "site of lession - 0.0%\n",
      "type of lession - 0.0%\n",
      "subtype of lession - 0.0%\n",
      "specific code lession - 0.0%\n"
     ]
    }
   ],
   "source": [
    "#Еще раз вспомним, как обстоят дела с пропусками\n",
    "for col in data.columns:\n",
    "    pct_missing = data[col].isnull().mean()\n",
    "    print(f'{col} - {pct_missing :.1%}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сразу можно сделать вывод, что столбцы nasogastric reflux PH, abdomcentesis total protein, abdominocentesis appearance имеют крайне мало значений и, скорее всего, востановить данные будет крайне затруднительно. Только если по зависимостям с остальными признаками. В условиях данной задачи они будут удалены."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [],
   "source": [
    "delete_cols = ['nasogastric reflux PH', 'abdomcentesis total protein', 'abdominocentesis appearance']\n",
    "data = data.drop(delete_cols, axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "С категориальными работать проще - можно просто указать пропуск, как новую категорию, заменив их, скажем на строку 'NA'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_cols.remove('abdominocentesis appearance')\n",
    "data[cat_cols] = data[cat_cols].apply(lambda x: x.fillna('NA', axis=0)).astype(str)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rectal temperature"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Значения Rectal temperature итак плотно сконцентрированы около моды/среднего. Так что пропуски заменим на моду."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_mode = data['Rectal temperature'].mode()[0]\n",
    "data['Rectal temperature'] = data['Rectal temperature'].fillna(temp_mode)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### total protein"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "График плотности распределения имеет 2 явных пика: первый из которых сконцентрирован около нормального значения белка, а второй около значения, в 8 раз больше нормы. Возможно, это как раз является очень наглядным и полезным показателем серьезной проблемы.\n",
    "Опять же, было бы хорошо восстановить пропущенные значения на основе другого показательного признака. Но в рамках этой работы такое исследование не проводится."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['total protein'].plot.kde()\n",
    "plt.title('Плотность распределения total protein')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Следует иметь больше информации, чтобы принять верное решение, но чтобы явно не относить лошадь к одному из двух классов (2 пика), можем заменить пропуски на среднее значение."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['total protein'] = data['total protein'].fillna(data['total protein'].mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pulse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Среднее значение пульса: 71.91\n",
      "Мода пульса: 48.00\n"
     ]
    }
   ],
   "source": [
    "print('Среднее значение пульса: {:.2f}'.format(data['Pulse'].mean()))\n",
    "print('Мода пульса: {:.2f}'.format(data['Pulse'].mode()[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Среднее значение пульса значительно выше значения моды. Если бы на основе данного датасета мы занимались предсказанием состояния лошадей по данным анализов (измерений) и целевой переменной являлся бы диагноз или предсказание о здоровье лошади, то лучше было бы задать пульс равным среднему значению, т.е. большему из моды и среднего, так как в этой задаче лучше ошибки FP, чем FN."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Pulse'] = data['Pulse'].fillna(data['Pulse'].mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### packed cell volume"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['packed cell volume'].plot.kde()\n",
    "plt.title('Плотность распределения packed cell volume')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Плотность распределения значений packed cell volume имеет вид, близкий к нормальному распределению. Будет логичным заменить пропуски модой."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['packed cell volume'] = data['packed cell volume'].fillna(data['packed cell volume'].mode()[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Respiratory rate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Respiratory rate имеют большую дисперсию, чтобы сохранить общее распределение можно было использовать заполнение следующим или предыдущим\n",
    "предварительно отсортировав по наиболее коррелирующему с ним распределению. Но в рамках этой работы такое исследование не проводится.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['Respiratory rate'].plot.kde()\n",
    "plt.title('Плотность распределения Respiratory rate')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Аналогично packed cell volume заполняем пропуски модой."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Respiratory rate'] = data['Respiratory rate'].fillna(data['Respiratory rate'].mode()[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Итог"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 300 entries, 0 to 299\n",
      "Data columns (total 26 columns):\n",
      "Surgery                       300 non-null object\n",
      "Age                           300 non-null object\n",
      "Hospital Number               300 non-null object\n",
      "Rectal temperature            300 non-null float64\n",
      "Pulse                         300 non-null float64\n",
      "Respiratory rate              300 non-null float64\n",
      "temperature of extremities    300 non-null object\n",
      "peripheral pulse              300 non-null object\n",
      "mucous membranes              300 non-null object\n",
      "capillary refill time         300 non-null object\n",
      "pain                          300 non-null object\n",
      "peristalsis                   300 non-null object\n",
      "abdominal distension          300 non-null object\n",
      "nasogastric tube              300 non-null object\n",
      "nasogastric reflux            300 non-null object\n",
      "rectal examination - feces    300 non-null object\n",
      "abdomen                       300 non-null object\n",
      "packed cell volume            300 non-null float64\n",
      "total protein                 300 non-null float64\n",
      "outcome                       300 non-null object\n",
      "surgical lesion               300 non-null object\n",
      "cp_data                       300 non-null object\n",
      "site of lession               300 non-null object\n",
      "type of lession               300 non-null object\n",
      "subtype of lession            300 non-null object\n",
      "specific code lession         300 non-null object\n",
      "dtypes: float64(5), object(21)\n",
      "memory usage: 61.1+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Дополнительная часть (необязательная)\n",
    "\n",
    "Выполнить задания 1-3 для всего набора данных."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### ПРИМЕЧАНИЕ\n",
    "Домашнее задание сдается ссылкой на репозиторий [GitHub](https://github.com/).\n",
    "Не сможем проверить или помочь, если вы пришлете:\n",
    "- файлы;\n",
    "- архивы;\n",
    "- скриншоты кода.\n",
    "\n",
    "Все обсуждения и консультации по выполнению домашнего задания ведутся только на соответствующем канале в slack.\n",
    "\n",
    "##### Как правильно задавать вопросы аспирантам, преподавателям и коллегам\n",
    "Прежде чем задать вопрос, попробуйте найти ответ в интернете. Навык самостоятельного поиска информации — один из важнейших. Каждый практикующий специалист любого уровня делает это ежедневно.\n",
    "\n",
    "Сформулируйте вопрос по алгоритму:  \n",
    "1) Что я делаю?  \n",
    "2) Какого результата я ожидаю?  \n",
    "3) Как фактический результат отличается от ожидаемого?  \n",
    "4) Что я уже попробовал сделать, чтобы исправить проблему?  \n",
    "\n",
    "По возможности прикрепите к вопросу скриншоты либо ссылки на код. Не выкладывайте все решение, оставляйте только проблемный и воспроизводимый участок кода."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
